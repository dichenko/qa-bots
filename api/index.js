const { Telegraf } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ—Ç–æ–≤ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º BOT_TOKEN_
const BOT_TOKENS = {};
Object.keys(process.env).forEach(key => {
  if (key.startsWith('TELEGRAM_BOT_TOKEN_')) {
    const botId = key.replace('TELEGRAM_BOT_TOKEN_', '');
    BOT_TOKENS[botId] = process.env[key];
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
if (process.env.TELEGRAM_BOT_TOKEN) {
  BOT_TOKENS['DEFAULT'] = process.env.TELEGRAM_BOT_TOKEN;
}

const OWNER_ID = process.env.OWNER_TELEGRAM_ID;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (Object.keys(BOT_TOKENS).length === 0 || !OWNER_ID) {
  console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞');
  process.exit(1);
}

if (!SUPABASE_URL || !SUPABASE_KEY) {
  console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase');
  process.exit(1);
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('SUPABASE_URL –∑–∞–¥–∞–Ω:', !!SUPABASE_URL);
console.log('SUPABASE_KEY –∑–∞–¥–∞–Ω:', !!SUPABASE_KEY);
console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤:', Object.keys(BOT_TOKENS).length);
console.log('IDs –±–æ—Ç–æ–≤:', Object.keys(BOT_TOKENS).join(', '));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
async function checkTableExists() {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã qa_bot_messages...');
    const { data, error } = await supabase
      .from('qa_bot_messages')
      .select('id')
      .limit(1);
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã qa_bot_messages:', error);
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞
      if (error.code === '42P01') { // –ö–æ–¥ –æ—à–∏–±–∫–∏ PostgreSQL –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
        console.log('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É...');
      }
    } else {
      console.log('–¢–∞–±–ª–∏—Ü–∞ qa_bot_messages —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã:', err);
  }
}

// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
checkTableExists();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
const bots = {};
Object.entries(BOT_TOKENS).forEach(([botId, token]) => {
  try {
    const bot = new Telegraf(token);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.start(async (ctx) => {
      const userId = ctx.from.id;
      const userName = ctx.from.first_name;
      const userSurname = ctx.from.last_name;
      const messageText = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞';
      const timestamp = new Date().toISOString();

      // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã —Å–∫–æ—Ä–æ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏–º.');
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É
      await bot.telegram.sendMessage(
        OWNER_ID,
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${userId}\n–ò–º—è: ${userName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n–§–∞–º–∏–ª–∏—è: ${userSurname || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n–î–µ–π—Å—Ç–≤–∏–µ: –ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞\n–ë–æ—Ç: ${botId}`
      );

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
      await saveMessageToDatabase(userId, userName, userSurname, messageText, timestamp, botId);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot.on('message', async (ctx) => {
      if (ctx.message.text) {
        const userId = ctx.from.id;
        const userName = ctx.from.first_name;
        const userSurname = ctx.from.last_name;
        const messageText = ctx.message.text;
        const timestamp = new Date().toISOString();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if (ctx.message.reply_to_message && ctx.from.id.toString() === OWNER_ID) {
          // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –±–æ—Ç–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          const originalMessageText = ctx.message.reply_to_message.text;
          const userIdMatch = originalMessageText.match(/ID: (\d+)/);
          const botIdMatch = originalMessageText.match(/–ë–æ—Ç: ([A-Z0-9_]+)/);
          
          if (userIdMatch && userIdMatch[1] && botIdMatch && botIdMatch[1]) {
            const recipientId = userIdMatch[1];
            const targetBotId = botIdMatch[1];
            const targetBot = bots[targetBotId];
            
            if (targetBot) {
              // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              await targetBot.telegram.sendMessage(recipientId, `–û—Ç–≤–µ—Ç: ${messageText}`);
              
              // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î
              await saveMessageToDatabase(OWNER_ID, '–í–ª–∞–¥–µ–ª–µ—Ü', '', `–û—Ç–≤–µ—Ç –¥–ª—è ${recipientId}: ${messageText}`, timestamp, targetBotId);
              
              // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
              await ctx.reply(`–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId} —á–µ—Ä–µ–∑ –±–æ—Ç–∞ ${targetBotId}`);
            } else {
              await ctx.reply(`–ù–µ –Ω–∞–π–¥–µ–Ω –±–æ—Ç —Å ID: ${targetBotId}`);
            }
          } else {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
          }
        } 
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        else if (ctx.from.id.toString() !== OWNER_ID) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
          const hadRecentMessages = await hasRecentMessages(userId, botId);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
          if (!hadRecentMessages) {
            await ctx.reply('–ü–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º');
          }
          
          // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
          await bot.telegram.sendMessage(
            OWNER_ID,
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${userId}\n–ò–º—è: ${userName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n–§–∞–º–∏–ª–∏—è: ${userSurname || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${messageText}\n–ë–æ—Ç: ${botId}`
          );
          
          // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
          await saveMessageToDatabase(userId, userName, userSurname, messageText, timestamp, botId);
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    bot.catch((err, ctx) => {
      console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType} –≤ –±–æ—Ç–µ ${botId}`, err);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
    bots[botId] = bot;
    console.log(`–ë–æ—Ç ${botId} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
    
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ ${botId}:`, error);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
async function saveMessageToDatabase(userId, userName, userSurname, messageText, timestamp, botId) {
  try {
    console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î:', {
      tgid: userId,
      user_name: userName,
      text: messageText.substring(0, 20) + '...', // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–æ–≤
      bot_id: botId
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (!userId) {
      console.error('userId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º userId –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—Ç—Ä–æ–∫–∞
    const tgidValue = userId.toString();
    
    const { data, error } = await supabase
      .from('qa_bot_messages')
      .insert([
        { 
          tgid: tgidValue,
          user_name: userName || null,
          user_surname: userSurname || null,
          text: messageText || '',
          timecode: timestamp,
          bot_id: botId
        }
      ]);
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', error);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      try {
        const firstBot = Object.values(bots)[0];
        await firstBot.telegram.sendMessage(
          OWNER_ID,
          `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:\n–ö–æ–¥: ${error.code}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}\n–î–µ—Ç–∞–ª–∏: ${error.details || '–Ω–µ—Ç'}`
        );
      } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü—É:', e);
      }
    } else {
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î');
    }
  } catch (err) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î:', err);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞
    try {
      const firstBot = Object.values(bots)[0];
      await firstBot.telegram.sendMessage(
        OWNER_ID,
        `üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: ${err.message}`
      );
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü—É:', e);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
async function hasRecentMessages(userId, botId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    const oneDayAgo = new Date();
    oneDayAgo.setHours(oneDayAgo.getHours() - 24);
    const oneDayAgoStr = oneDayAgo.toISOString();
    
    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ –±–æ—Ç–µ ${botId} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–ø–æ—Å–ª–µ ${oneDayAgoStr})...`);
    
    const { data, error } = await supabase
      .from('qa_bot_messages')
      .select('id, timecode')
      .eq('tgid', userId.toString())
      .eq('bot_id', botId)
      .gte('timecode', oneDayAgoStr)
      .order('timecode', { ascending: false })
      .limit(1);
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç
    }
    
    const hasRecent = data && data.length > 0;
    console.log(`–ù–∞–π–¥–µ–Ω—ã –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: ${hasRecent}`, hasRecent ? `(–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ ${data[0].timecode})` : '');
    
    return hasRecent;
  } catch (err) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
    return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç
  }
}

// Webhook –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ—Ç–∞
      const path = req.url || '';
      
      let botId = 'DEFAULT'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º DEFAULT
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±–æ—Ç–∞ –∏–∑ –ø—É—Ç–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
      const pathSegments = path.split('/').filter(segment => segment);
      if (pathSegments.length > 1) {
        botId = pathSegments[pathSegments.length - 1];
      }
      
      console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ ${path}, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω botId: ${botId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–æ—Ç —Å —Ç–∞–∫–∏–º ID
      if (bots[botId]) {
        await bots[botId].handleUpdate(req.body);
        res.status(200).end();
      } else {
        // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å DEFAULT –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (botId !== 'DEFAULT' && bots['DEFAULT']) {
          console.log(`–ë–æ—Ç —Å ID "${botId}" –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º DEFAULT`);
          await bots['DEFAULT'].handleUpdate(req.body);
          res.status(200).end();
        } else {
          // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ—Ç DEFAULT –±–æ—Ç–∞
          console.error(`–ë–æ—Ç —Å ID "${botId}" –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø—É—Ç—å: ${path}), –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã: ${Object.keys(bots).join(', ')}`);
          res.status(404).json({ error: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', availableBots: Object.keys(bots) });
        }
      }
    } else {
      // –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–∞—Ö
      const activeBots = Object.keys(bots);
      res.status(200).json({ 
        status: '–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞',
        bots: activeBots,
        count: activeBots.length
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}; 