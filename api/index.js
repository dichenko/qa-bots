const { Telegraf } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const OWNER_ID = process.env.OWNER_TELEGRAM_ID;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!BOT_TOKEN || !OWNER_ID) {
  console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞');
  process.exit(1);
}

if (!SUPABASE_URL || !SUPABASE_KEY) {
  console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
async function saveMessageToDatabase(userId, userName, userSurname, messageText, timestamp) {
  try {
    const { data, error } = await supabase
      .from('qa-bot-messages')
      .insert([
        { 
          tgid: userId,
          user_name: userName || null,
          user_surname: userSurname || null,
          text: messageText,
          timecode: timestamp
        }
      ]);
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', error);
    } else {
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', data);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î:', err);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  const userName = ctx.from.first_name;
  const userSurname = ctx.from.last_name;
  const messageText = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞';
  const timestamp = new Date().toISOString();

  // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã —Å–∫–æ—Ä–æ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏–º.');
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É
  await bot.telegram.sendMessage(
    OWNER_ID,
    `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${userId}\n–ò–º—è: ${userName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n–§–∞–º–∏–ª–∏—è: ${userSurname || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n–î–µ–π—Å—Ç–≤–∏–µ: –ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`
  );

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
  await saveMessageToDatabase(userId, userName, userSurname, messageText, timestamp);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.on('message', async (ctx) => {
  if (ctx.message.text) {
    const userId = ctx.from.id;
    const userName = ctx.from.first_name;
    const userSurname = ctx.from.last_name;
    const messageText = ctx.message.text;
    const timestamp = new Date().toISOString();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if (ctx.message.reply_to_message && ctx.from.id.toString() === OWNER_ID) {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const originalMessageText = ctx.message.reply_to_message.text;
      const userIdMatch = originalMessageText.match(/ID: (\d+)/);
      
      if (userIdMatch && userIdMatch[1]) {
        const recipientId = userIdMatch[1];
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.telegram.sendMessage(recipientId, `–û—Ç–≤–µ—Ç: ${messageText}`);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î
        await saveMessageToDatabase(OWNER_ID, '–í–ª–∞–¥–µ–ª–µ—Ü', '', `–û—Ç–≤–µ—Ç –¥–ª—è ${recipientId}: ${messageText}`, timestamp);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        await ctx.reply(`–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}`);
      } else {
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
      }
    } 
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    else if (ctx.from.id.toString() !== OWNER_ID) {
      // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply('–ü–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º');
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É
      await bot.telegram.sendMessage(
        OWNER_ID,
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${userId}\n–ò–º—è: ${userName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n–§–∞–º–∏–ª–∏—è: ${userSurname || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${messageText}`
      );
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
      await saveMessageToDatabase(userId, userName, userSurname, messageText, timestamp);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}`, err);
});

// Webhook –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body);
      res.status(200).end();
    } else {
      // –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫—É—é-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      res.status(200).json({ status: '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}; 